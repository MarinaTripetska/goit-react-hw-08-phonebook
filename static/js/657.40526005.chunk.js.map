{"version":3,"file":"static/js/657.40526005.chunk.js","mappings":"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","sources":["components/RegistrationForm/validationConfig.js","components/RegistrationForm/RegistrationForm.jsx","pages/RegistrationPage/RegistrationPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const SignupSchema = Yup.object().shape({\n  name: Yup.string('Enter your name')\n    .min(3, 'Too Short!')\n    .max(25, 'Too long!')\n    .required(\"It's required!\"),\n  email: Yup.string().email('Invalid email').required(\"It's required!\"),\n  password: Yup.string()\n    .min(7, 'Password shoud be no less than 7 symbols!')\n    .required(\"It's required!\"),\n  passwordConfirm: Yup.string()\n    .required(\"It's required!\")\n    .oneOf([Yup.ref('password')], 'Passwords must mutch'),\n});\n","import { useDispatch } from 'react-redux';\nimport { authOperations } from '../../redux/app/authorization';\nimport { useFormik } from 'formik';\nimport {\n  Button,\n  TextField,\n  Avatar,\n  CssBaseline,\n  Grid,\n  Box,\n  Typography,\n  Link as MUIlink,\n} from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport { SignupSchema } from './validationConfig';\nimport AssignmentIndOutlinedIcon from '@mui/icons-material/AssignmentIndOutlined';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n  passwordConfirm: '',\n};\n\nexport const RegistrationForm = () => {\n  const dispatch = useDispatch();\n  const {\n    values,\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    isValid,\n    errors,\n    touched,\n  } = useFormik({\n    initialValues,\n    validationSchema: SignupSchema,\n\n    onSubmit: values => {\n      const { name, email, password } = values;\n      dispatch(authOperations.register({ name, email, password }));\n    },\n  });\n\n  return (\n    <>\n      <CssBaseline />\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Box component=\"form\" sx={{ mt: 3 }} onSubmit={handleSubmit}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                label=\"Name\"\n                type=\"text\"\n                name=\"name\"\n                value={values.name}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={touched.name && Boolean(errors.name)}\n                helperText={touched.name && errors.name}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                label=\"Email\"\n                type=\"email\"\n                name=\"email\"\n                value={values.email}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={touched.email && Boolean(errors.email)}\n                helperText={touched.email && errors.email}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <TextField\n                type=\"password\"\n                name=\"password\"\n                variant=\"outlined\"\n                label=\"Password\"\n                value={values.password}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={touched.password && Boolean(errors.password)}\n                helperText={touched.password && errors.password}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <TextField\n                type=\"password\"\n                name=\"passwordConfirm\"\n                variant=\"outlined\"\n                label=\"Confirm Password\"\n                value={values.passwordConfirm}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={\n                  touched.passwordConfirm && Boolean(errors.passwordConfirm)\n                }\n                helperText={touched.passwordConfirm && errors.passwordConfirm}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            variant=\"contained\"\n            fullWidth\n            sx={{ mt: 3, mb: 2 }}\n            startIcon={<AssignmentIndOutlinedIcon />}\n            type=\"subbmit\"\n            disabled={!isValid}\n          >\n            SING UP\n          </Button>\n          <Grid container justifyContent=\"flex-end\">\n            <Grid item>\n              <MUIlink variant=\"body2\" component={Link} to=\"/login\">\n                Already have an account? Sign in\n              </MUIlink>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </>\n  );\n};\n","import { Container } from '@mui/material';\nimport { RegistrationForm } from 'components/RegistrationForm';\n\nexport const RegistrationPage = () => {\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <RegistrationForm />\n    </Container>\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["SignupSchema","Yup","shape","name","min","max","required","email","password","passwordConfirm","oneOf","initialValues","RegistrationForm","dispatch","useDispatch","useFormik","validationSchema","onSubmit","values","authOperations","handleSubmit","handleChange","handleBlur","isValid","errors","touched","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined","Typography","component","variant","mt","Grid","container","spacing","item","xs","sm","TextField","label","type","value","onChange","onBlur","error","Boolean","helperText","Button","fullWidth","mb","startIcon","AssignmentIndOutlined","disabled","justifyContent","Link","to","RegistrationPage","Container","maxWidth"],"sourceRoot":""}